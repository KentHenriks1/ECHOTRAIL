// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with preferences and authentication
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String
  avatar       String?
  role         Role     @default(USER)
  
  // Authentication
  password_hash String  @map("password_hash")
  
  // Preferences stored as JSON
  preferences  Json     @default("{}")
  
  // Timestamps
  created_at   DateTime @default(now()) @map("created_at")
  updated_at   DateTime @updatedAt @map("updated_at")
  
  // Relations
  trails       Trail[]    @relation("UserTrails")
  share_links  ShareLink[] @relation("UserShareLinks")
  user_sessions UserSession[] @relation("UserSessions")
  
  @@map("users")
}

// Trail model for GPS tracks
model Trail {
  id          String  @id @default(cuid())
  name        String
  description String?
  is_public   Boolean @default(false) @map("is_public")
  
  // Metadata stored as JSON for flexibility
  metadata    Json    @default("{}")
  
  // Timestamps
  created_at  DateTime @default(now()) @map("created_at")
  updated_at  DateTime @updatedAt @map("updated_at")
  
  // Relations
  user_id      String   @map("user_id")
  user         User     @relation("UserTrails", fields: [user_id], references: [id], onDelete: Cascade)
  track_points TrackPoint[] @relation("TrailTrackPoints")
  share_links  ShareLink[]  @relation("TrailShareLinks")
  
  // Indexes
  @@index([user_id])
  @@index([created_at])
  @@index([is_public])
  @@map("trails")
}

// GPS track points
model TrackPoint {
  id        String   @id @default(cuid())
  latitude  Float
  longitude Float
  timestamp DateTime
  
  // Optional GPS data
  accuracy  Float?
  altitude  Float?
  speed     Float?
  heading   Float?
  
  // Timestamps
  created_at DateTime @default(now()) @map("created_at")
  
  // Relations
  trail_id  String   @map("trail_id")
  trail     Trail    @relation("TrailTrackPoints", fields: [trail_id], references: [id], onDelete: Cascade)
  
  // Indexes for geospatial and time-based queries
  @@index([trail_id])
  @@index([timestamp])
  @@index([latitude, longitude])
  @@map("track_points")
}

// Share links for trail sharing
model ShareLink {
  id         String    @id @default(cuid())
  token      String    @unique @default(cuid())
  expires_at DateTime? @map("expires_at")
  is_active  Boolean   @default(true) @map("is_active")
  
  // Timestamps
  created_at DateTime  @default(now()) @map("created_at")
  
  // Relations
  trail_id   String    @map("trail_id")
  trail      Trail     @relation("TrailShareLinks", fields: [trail_id], references: [id], onDelete: Cascade)
  user_id    String    @map("user_id")
  user       User      @relation("UserShareLinks", fields: [user_id], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([token])
  @@index([trail_id])
  @@index([expires_at])
  @@map("share_links")
}

// User sessions for token management
model UserSession {
  id            String   @id @default(cuid())
  refresh_token String   @unique @map("refresh_token")
  expires_at    DateTime @map("expires_at")
  user_agent    String?  @map("user_agent")
  ip_address    String?  @map("ip_address")
  
  // Timestamps
  created_at    DateTime @default(now()) @map("created_at")
  updated_at    DateTime @updatedAt @map("updated_at")
  
  // Relations
  user_id       String   @map("user_id")
  user          User     @relation("UserSessions", fields: [user_id], references: [id], onDelete: Cascade)
  
  // Indexes
  @@index([user_id])
  @@index([refresh_token])
  @@index([expires_at])
  @@map("user_sessions")
}

// Enums
enum Role {
  USER
  ADMIN
}

// Views for performance optimization
// Note: These would be created via migrations, not Prisma schema

// Example: Trail statistics view
// CREATE VIEW trail_stats AS
// SELECT 
//   t.id,
//   t.name,
//   COUNT(tp.id) as point_count,
//   MIN(tp.timestamp) as start_time,
//   MAX(tp.timestamp) as end_time,
//   ST_Length(ST_MakeLine(ST_Point(tp.longitude, tp.latitude) ORDER BY tp.timestamp)) as distance
// FROM trails t
// LEFT JOIN track_points tp ON t.id = tp.trail_id
// GROUP BY t.id, t.name;
