{"file":"C:\\Users\\Kenth\\Desktop\\echotrail-project\\echotrail\\apps\\mobile\\src\\__tests__\\basic\\demo.test.ts","mappings":"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","names":[],"sources":["C:\\Users\\Kenth\\Desktop\\echotrail-project\\echotrail\\apps\\mobile\\src\\__tests__\\basic\\demo.test.ts"],"sourcesContent":["/**\r\n * Basic Demo Test\r\n * \r\n * This test demonstrates that our test infrastructure is working\r\n * and tests basic TypeScript functionality.\r\n */\r\n\r\ndescribe('Basic Test Infrastructure', () => {\r\n  describe('Environment Setup', () => {\r\n    it('should have test environment configured', () => {\r\n      expect(process.env.NODE_ENV).toBe('test');\r\n      expect(process.env.METRO_TEST_MODE).toBe('true');\r\n      expect(typeof process.env.BUILD_HISTORY_PATH).toBe('string');\r\n    });\r\n\r\n    it('should have deterministic test utilities', () => {\r\n      // Test basic functionality\r\n      const testString = 'Hello, World!';\r\n      expect(testString).toContain('World');\r\n      expect(testString.length).toBeGreaterThan(0);\r\n    });\r\n\r\n    it('should have mock date functionality', () => {\r\n      // Test that Date.now() returns a consistent value in tests\r\n      const now1 = Date.now();\r\n      const now2 = Date.now();\r\n      expect(now1).toBe(now2); // Should be same due to mocking\r\n    });\r\n\r\n    it('should support async operations', async () => {\r\n      const asyncOperation = async (): Promise<string> => {\r\n        return new Promise((resolve) => {\r\n          setTimeout(() => resolve('async result'), 10);\r\n        });\r\n      };\r\n\r\n      const result = await asyncOperation();\r\n      expect(result).toBe('async result');\r\n    });\r\n  });\r\n\r\n  describe('Test Utilities', () => {\r\n    it('should have basic matchers available', () => {\r\n      expect(true).toBeTruthy();\r\n      expect(false).toBeFalsy();\r\n      expect([1, 2, 3]).toHaveLength(3);\r\n      expect({ name: 'test' }).toHaveProperty('name');\r\n    });\r\n\r\n    it('should handle error testing', () => {\r\n      const throwError = () => {\r\n        throw new Error('Test error');\r\n      };\r\n\r\n      expect(throwError).toThrow('Test error');\r\n      expect(throwError).toThrow(Error);\r\n    });\r\n\r\n    it('should support numeric ranges', () => {\r\n      const value = 42;\r\n      expect(value).toBeGreaterThan(40);\r\n      expect(value).toBeLessThan(50);\r\n      expect(value).toBeGreaterThanOrEqual(42);\r\n      expect(value).toBeLessThanOrEqual(42);\r\n    });\r\n\r\n    it('should handle arrays and objects', () => {\r\n      const testArray = [1, 2, 3, 4, 5];\r\n      const testObject = { name: 'Test', active: true, count: 5 };\r\n\r\n      expect(testArray).toContain(3);\r\n      expect(testArray).toEqual(expect.arrayContaining([1, 2, 3]));\r\n\r\n      expect(testObject).toMatchObject({ name: 'Test' });\r\n      expect(testObject).toHaveProperty('count', 5);\r\n    });\r\n  });\r\n\r\n  describe('Performance and Memory', () => {\r\n    it('should complete within reasonable time', () => {\r\n      const start = Date.now();\r\n      \r\n      // Simulate some work\r\n      for (let i = 0; i < 1000; i++) {\r\n        Math.sqrt(i);\r\n      }\r\n      \r\n      const duration = Date.now() - start;\r\n      expect(duration).toBeLessThan(100); // Should complete in less than 100ms\r\n    });\r\n\r\n    it('should handle memory allocation', () => {\r\n      const largeArray = new Array(10000).fill(0).map((_, i) => ({ id: i, value: i * 2 }));\r\n      \r\n      expect(largeArray).toHaveLength(10000);\r\n      expect(largeArray[5000]).toEqual({ id: 5000, value: 10000 });\r\n      \r\n      // Clean up\r\n      largeArray.length = 0;\r\n    });\r\n  });\r\n\r\n  describe('Mock and Spy Support', () => {\r\n    it('should support Jest mocks', () => {\r\n      const mockFunction = jest.fn();\r\n      mockFunction('test argument');\r\n      \r\n      expect(mockFunction).toHaveBeenCalled();\r\n      expect(mockFunction).toHaveBeenCalledWith('test argument');\r\n      expect(mockFunction).toHaveBeenCalledTimes(1);\r\n    });\r\n\r\n    it('should support spying on objects', () => {\r\n      const testObject = {\r\n        getValue: () => 'original',\r\n        setValue: (value: string) => value\r\n      };\r\n\r\n      const spy = jest.spyOn(testObject, 'getValue');\r\n      spy.mockReturnValue('mocked');\r\n\r\n      expect(testObject.getValue()).toBe('mocked');\r\n      expect(spy).toHaveBeenCalled();\r\n\r\n      spy.mockRestore();\r\n      expect(testObject.getValue()).toBe('original');\r\n    });\r\n\r\n    it('should support mock implementations', () => {\r\n      const mockCallback = jest.fn();\r\n      mockCallback.mockImplementation((name: string) => `Hello, ${name}!`);\r\n\r\n      const result = mockCallback('World');\r\n      expect(result).toBe('Hello, World!');\r\n      expect(mockCallback).toHaveBeenCalledWith('World');\r\n    });\r\n  });\r\n\r\n  describe('TypeScript Features', () => {\r\n    interface TestInterface {\r\n      name: string;\r\n      value: number;\r\n      active?: boolean;\r\n    }\r\n\r\n    it('should work with TypeScript interfaces', () => {\r\n      const testData: TestInterface = {\r\n        name: 'Test Item',\r\n        value: 100\r\n      };\r\n\r\n      expect(testData.name).toBe('Test Item');\r\n      expect(testData.value).toBe(100);\r\n      expect(testData.active).toBeUndefined();\r\n    });\r\n\r\n    it('should work with generics', () => {\r\n      const createArray = <T>(items: T[]): T[] => {\r\n        return [...items];\r\n      };\r\n\r\n      const numberArray = createArray([1, 2, 3]);\r\n      const stringArray = createArray(['a', 'b', 'c']);\r\n\r\n      expect(numberArray).toEqual([1, 2, 3]);\r\n      expect(stringArray).toEqual(['a', 'b', 'c']);\r\n    });\r\n\r\n    it('should work with type guards', () => {\r\n      const isString = (value: unknown): value is string => {\r\n        return typeof value === 'string';\r\n      };\r\n\r\n      expect(isString('test')).toBe(true);\r\n      expect(isString(123)).toBe(false);\r\n      expect(isString(null)).toBe(false);\r\n    });\r\n  });\r\n});\r\n\r\n// Test the test hygiene utilities\r\ndescribe('Test Hygiene Integration', () => {\r\n  it('should provide deterministic random data', () => {\r\n    // Since we've mocked Math.random with a seed, this should be deterministic\r\n    const random1 = Math.random();\r\n    const random2 = Math.random();\r\n    \r\n    // Values should be different but deterministic across test runs\r\n    expect(random1).not.toBe(random2);\r\n    expect(typeof random1).toBe('number');\r\n    expect(typeof random2).toBe('number');\r\n  });\r\n\r\n  it('should have consistent timestamps', () => {\r\n    const time1 = Date.now();\r\n    // Advance time by 1000ms using our utility\r\n    // Note: advanceTime function would need to be imported from test-hygiene\r\n    const time2 = Date.now();\r\n    \r\n    // Due to our mocking, times should be consistent\r\n    expect(time1).toBe(time2);\r\n  });\r\n});"],"version":3}