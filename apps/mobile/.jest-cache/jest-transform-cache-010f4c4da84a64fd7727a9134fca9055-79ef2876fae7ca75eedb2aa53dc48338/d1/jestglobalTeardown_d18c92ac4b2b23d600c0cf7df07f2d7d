2d1ab667d4a0596747380ff2d979afb6
"use strict";
/**
 * Jest Global Teardown
 *
 * This runs once after all test suites complete.
 * Use this for cleanup operations and final reporting.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = globalTeardown;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
async function globalTeardown() {
    console.log('üßπ Starting Jest global teardown...');
    try {
        // Calculate total test execution time
        const startTime = parseInt(process.env.TEST_START_TIME || '0');
        const totalTestTime = startTime ? Date.now() - startTime : 0;
        // Generate test execution summary
        const testSummary = {
            totalExecutionTime: totalTestTime,
            timestamp: new Date().toISOString(),
            nodeVersion: process.version,
            platform: process.platform,
            arch: process.arch,
            memoryUsage: process.memoryUsage(),
            environment: process.env.NODE_ENV,
            ci: process.env.CI === 'true',
        };
        // Write test execution summary
        const reportsDir = './reports';
        if (!fs.existsSync(reportsDir)) {
            fs.mkdirSync(reportsDir, { recursive: true });
        }
        fs.writeFileSync(path.join(reportsDir, 'test-execution-summary.json'), JSON.stringify(testSummary, null, 2));
        console.log(`  ‚è±Ô∏è  Total test execution time: ${totalTestTime}ms`);
        console.log(`  üíæ Memory usage: ${Math.round(testSummary.memoryUsage.heapUsed / 1024 / 1024)}MB`);
        // Clean up temporary test files (optional - keep for debugging)
        const cleanupTempFiles = process.env.JEST_CLEANUP_TEMP === 'true';
        if (cleanupTempFiles) {
            const tempDirs = [
                './tmp/test',
                './.jest-cache',
            ];
            for (const dir of tempDirs) {
                if (fs.existsSync(dir)) {
                    fs.rmSync(dir, { recursive: true, force: true });
                    console.log(`  üóëÔ∏è  Cleaned up: ${dir}`);
                }
            }
        }
        else {
            console.log('  üìÅ Temporary files preserved for debugging');
        }
        // Performance analysis
        if (fs.existsSync('./reports/junit/junit.xml')) {
            console.log('  üìä JUnit XML report generated');
        }
        if (fs.existsSync('./coverage/lcov.info')) {
            console.log('  üìà Coverage report generated');
        }
        // Check for test artifacts that might indicate issues
        const possibleIssues = [];
        // Check for slow test warnings
        if (totalTestTime > 300000) { // 5 minutes
            possibleIssues.push(`Long test execution time: ${Math.round(totalTestTime / 1000)}s`);
        }
        // Check memory usage
        const memoryUsageMB = testSummary.memoryUsage.heapUsed / 1024 / 1024;
        if (memoryUsageMB > 512) {
            possibleIssues.push(`High memory usage: ${Math.round(memoryUsageMB)}MB`);
        }
        // Report potential issues
        if (possibleIssues.length > 0) {
            console.log('  ‚ö†Ô∏è  Potential issues detected:');
            possibleIssues.forEach(issue => console.log(`    - ${issue}`));
        }
        // Final cleanup of global state
        delete process.env.JEST_GLOBAL_SETUP_COMPLETE;
        delete process.env.TEST_START_TIME;
        console.log('‚úÖ Jest global teardown completed successfully');
    }
    catch (error) {
        console.error('‚ùå Jest global teardown failed:', error);
        // Don't throw here - we don't want to fail tests due to cleanup issues
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiQzpcXFVzZXJzXFxLZW50aFxcRGVza3RvcFxcZWNob3RyYWlsLXByb2plY3RcXGVjaG90cmFpbFxcYXBwc1xcbW9iaWxlXFxzcmNcXF9fdGVzdHNfX1xcc2V0dXBcXGplc3QuZ2xvYmFsVGVhcmRvd24udHMiLCJtYXBwaW5ncyI6IjtBQUFBOzs7OztHQUtHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUtILGlDQTRGQztBQS9GRCx1Q0FBeUI7QUFDekIsMkNBQTZCO0FBRWQsS0FBSyxVQUFVLGNBQWM7SUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsQ0FBQyxDQUFDO0lBRW5ELElBQUksQ0FBQztRQUNILHNDQUFzQztRQUN0QyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksR0FBRyxDQUFDLENBQUM7UUFDL0QsTUFBTSxhQUFhLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0Qsa0NBQWtDO1FBQ2xDLE1BQU0sV0FBVyxHQUFHO1lBQ2xCLGtCQUFrQixFQUFFLGFBQWE7WUFDakMsU0FBUyxFQUFFLElBQUksSUFBSSxFQUFFLENBQUMsV0FBVyxFQUFFO1lBQ25DLFdBQVcsRUFBRSxPQUFPLENBQUMsT0FBTztZQUM1QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVE7WUFDMUIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxJQUFJO1lBQ2xCLFdBQVcsRUFBRSxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQ2xDLFdBQVcsRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVE7WUFDakMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLE1BQU07U0FDOUIsQ0FBQztRQUVGLCtCQUErQjtRQUMvQixNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUM7UUFDL0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENB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QUM5QyxPQUFPLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDO1FBRW5DLE9BQU8sQ0FBQyxHQUFHLENBQUMsK0NBQStDLENBQUMsQ0FBQztJQUUvRCxDQUFDO0lBQUMsT0FBTyxLQUFLLEVBQUUsQ0FBQztRQUNmLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0NBQWdDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdkQsdUVBQXVFO0lBQ3pFLENBQUM7QUFDSCxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcS2VudGhcXERlc2t0b3BcXGVjaG90cmFpbC1wcm9qZWN0XFxlY2hvdHJhaWxcXGFwcHNcXG1vYmlsZVxcc3JjXFxfX3Rlc3RzX19cXHNldHVwXFxqZXN0Lmdsb2JhbFRlYXJkb3duLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBKZXN0IEdsb2JhbCBUZWFyZG93blxyXG4gKiBcclxuICogVGhpcyBydW5zIG9uY2UgYWZ0ZXIgYWxsIHRlc3Qgc3VpdGVzIGNvbXBsZXRlLlxyXG4gKiBVc2UgdGhpcyBmb3IgY2xlYW51cCBvcGVyYXRpb25zIGFuZCBmaW5hbCByZXBvcnRpbmcuXHJcbiAqL1xyXG5cclxuaW1wb3J0ICogYXMgZnMgZnJvbSAnZnMnO1xyXG5pbXBvcnQgKiBhcyBwYXRoIGZyb20gJ3BhdGgnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2xvYmFsVGVhcmRvd24oKTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgY29uc29sZS5sb2coJ/Cfp7kgU3RhcnRpbmcgSmVzdCBnbG9iYWwgdGVhcmRvd24uLi4nKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIC8vIENhbGN1bGF0ZSB0b3RhbCB0ZXN0IGV4ZWN1dGlvbiB0aW1lXHJcbiAgICBjb25zdCBzdGFydFRpbWUgPSBwYXJzZUludChwcm9jZXNzLmVudi5URVNUX1NUQVJUX1RJTUUgfHwgJzAnKTtcclxuICAgIGNvbnN0IHRvdGFsVGVzdFRpbWUgPSBzdGFydFRpbWUgPyBEYXRlLm5vdygpIC0gc3RhcnRUaW1lIDogMDtcclxuICAgIFxyXG4gICAgLy8gR2VuZXJhdGUgdGVzdCBleGVjdXRpb24gc3VtbWFyeVxyXG4gICAgY29uc3QgdGVzdFN1bW1hcnkgPSB7XHJcbiAgICAgIHRvdGFsRXhlY3V0aW9uVGltZTogdG90YWxUZXN0VGltZSxcclxuICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCksXHJcbiAgICAgIG5vZGVWZXJzaW9uOiBwcm9jZXNzLnZlcnNpb24sXHJcbiAgICAgIHBsYXRmb3JtOiBwcm9jZXNzLnBsYXRmb3JtLFxyXG4gICAgICBhcmNoOiBwcm9jZXNzLmFyY2gsXHJcbiAgICAgIG1lbW9yeVVzYWdlOiBwcm9jZXNzLm1lbW9yeVVzYWdlKCksXHJcbiAgICAgIGVudmlyb25tZW50OiBwcm9jZXNzLmVudi5OT0RFX0VOVixcclxuICAgICAgY2k6IHByb2Nlc3MuZW52LkNJID09PSAndHJ1ZScsXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIFdyaXRlIHRlc3QgZXhlY3V0aW9uIHN1bW1hcnlcclxuICAgIGNvbnN0IHJlcG9ydHNEaXIgPSAnLi9yZXBvcnRzJztcclxuICAgIGlmICghZnMuZXhpc3RzU3luYyhyZXBvcnRzRGlyKSkge1xyXG4gICAgICBmcy5ta2RpclN5bmMocmVwb3J0c0RpciwgeyByZWN1cnNpdmU6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnMud3JpdGVGaWxlU3luYyhcclxuICAgICAgcGF0aC5qb2luKHJlcG9ydHNEaXIsICd0ZXN0LWV4ZWN1dGlvbi1zdW1tYXJ5Lmpzb24nKSxcclxuICAgICAgSlNPTi5zdHJpbmdpZnkodGVzdFN1bW1hcnksIG51bGwsIDIpXHJcbiAgICApO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGAgIOKPse+4jyAgVG90YWwgdGVzdCBleGVjdXRpb24gdGltZTogJHt0b3RhbFRlc3RUaW1lfW1zYCk7XHJcbiAgICBjb25zb2xlLmxvZyhgICDwn5K+IE1lbW9yeSB1c2FnZTogJHtNYXRoLnJvdW5kKHRlc3RTdW1tYXJ5Lm1lbW9yeVVzYWdlLmhlYXBVc2VkIC8gMTAyNCAvIDEwMjQpfU1CYCk7XHJcblxyXG4gICAgLy8gQ2xlYW4gdXAgdGVtcG9yYXJ5IHRlc3QgZmlsZXMgKG9wdGlvbmFsIC0ga2VlcCBmb3IgZGVidWdnaW5nKVxyXG4gICAgY29uc3QgY2xlYW51cFRlbXBGaWxlcyA9IHByb2Nlc3MuZW52LkpFU1RfQ0xFQU5VUF9URU1QID09PSAndHJ1ZSc7XHJcbiAgICBcclxuICAgIGlmIChjbGVhbnVwVGVtcEZpbGVzKSB7XHJcbiAgICAgIGNvbnN0IHRlbXBEaXJzID0gW1xyXG4gICAgICAgICcuL3RtcC90ZXN0JyxcclxuICAgICAgICAnLi8uamVzdC1jYWNoZScsXHJcbiAgICAgIF07XHJcblxyXG4gICAgICBmb3IgKGNvbnN0IGRpciBvZiB0ZW1wRGlycykge1xyXG4gICAgICAgIGlmIChmcy5leGlzdHNTeW5jKGRpcikpIHtcclxuICAgICAgICAgIGZzLnJtU3luYyhkaXIsIHsgcmVjdXJzaXZlOiB0cnVlLCBmb3JjZTogdHJ1ZSB9KTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgIPCfl5HvuI8gIENsZWFuZWQgdXA6ICR7ZGlyfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coJyAg8J+TgSBUZW1wb3JhcnkgZmlsZXMgcHJlc2VydmVkIGZvciBkZWJ1Z2dpbmcnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBQZXJmb3JtYW5jZSBhbmFseXNpc1xyXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoJy4vcmVwb3J0cy9qdW5pdC9qdW5pdC54bWwnKSkge1xyXG4gICAgICBjb25zb2xlLmxvZygnICDwn5OKIEpVbml0IFhNTCByZXBvcnQgZ2VuZXJhdGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGZzLmV4aXN0c1N5bmMoJy4vY292ZXJhZ2UvbGNvdi5pbmZvJykpIHtcclxuICAgICAgY29uc29sZS5sb2coJyAg8J+TiCBDb3ZlcmFnZSByZXBvcnQgZ2VuZXJhdGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2hlY2sgZm9yIHRlc3QgYXJ0aWZhY3RzIHRoYXQgbWlnaHQgaW5kaWNhdGUgaXNzdWVzXHJcbiAgICBjb25zdCBwb3NzaWJsZUlzc3Vlczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgICAvLyBDaGVjayBmb3Igc2xvdyB0ZXN0IHdhcm5pbmdzXHJcbiAgICBpZiAodG90YWxUZXN0VGltZSA+IDMwMDAwMCkgeyAvLyA1IG1pbnV0ZXNcclxuICAgICAgcG9zc2libGVJc3N1ZXMucHVzaChgTG9uZyB0ZXN0IGV4ZWN1dGlvbiB0aW1lOiAke01hdGgucm91bmQodG90YWxUZXN0VGltZSAvIDEwMDApfXNgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDaGVjayBtZW1vcnkgdXNhZ2VcclxuICAgIGNvbnN0IG1lbW9yeVVzYWdlTUIgPSB0ZXN0U3VtbWFyeS5tZW1vcnlVc2FnZS5oZWFwVXNlZCAvIDEwMjQgLyAxMDI0O1xyXG4gICAgaWYgKG1lbW9yeVVzYWdlTUIgPiA1MTIpIHtcclxuICAgICAgcG9zc2libGVJc3N1ZXMucHVzaChgSGlnaCBtZW1vcnkgdXNhZ2U6ICR7TWF0aC5yb3VuZChtZW1vcnlVc2FnZU1CKX1NQmApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlcG9ydCBwb3RlbnRpYWwgaXNzdWVzXHJcbiAgICBpZiAocG9zc2libGVJc3N1ZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICBjb25zb2xlLmxvZygnICDimqDvuI8gIFBvdGVudGlhbCBpc3N1ZXMgZGV0ZWN0ZWQ6Jyk7XHJcbiAgICAgIHBvc3NpYmxlSXNzdWVzLmZvckVhY2goaXNzdWUgPT4gY29uc29sZS5sb2coYCAgICAtICR7aXNzdWV9YCkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEZpbmFsIGNsZWFudXAgb2YgZ2xvYmFsIHN0YXRlXHJcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuSkVTVF9HTE9CQUxfU0VUVVBfQ09NUExFVEU7XHJcbiAgICBkZWxldGUgcHJvY2Vzcy5lbnYuVEVTVF9TVEFSVF9USU1FO1xyXG5cclxuICAgIGNvbnNvbGUubG9nKCfinIUgSmVzdCBnbG9iYWwgdGVhcmRvd24gY29tcGxldGVkIHN1Y2Nlc3NmdWxseScpO1xyXG5cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcign4p2MIEplc3QgZ2xvYmFsIHRlYXJkb3duIGZhaWxlZDonLCBlcnJvcik7XHJcbiAgICAvLyBEb24ndCB0aHJvdyBoZXJlIC0gd2UgZG9uJ3Qgd2FudCB0byBmYWlsIHRlc3RzIGR1ZSB0byBjbGVhbnVwIGlzc3Vlc1xyXG4gIH1cclxufSJdLCJ2ZXJzaW9uIjozfQ==