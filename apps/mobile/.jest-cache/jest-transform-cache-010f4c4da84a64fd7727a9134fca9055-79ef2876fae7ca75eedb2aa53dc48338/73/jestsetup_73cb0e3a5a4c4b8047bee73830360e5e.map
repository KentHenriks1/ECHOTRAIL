{"file":"C:\\Users\\Kenth\\Desktop\\echotrail-project\\echotrail\\apps\\mobile\\src\\__tests__\\setup\\jest.setup.ts","mappings":"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","names":[],"sources":["C:\\Users\\Kenth\\Desktop\\echotrail-project\\echotrail\\apps\\mobile\\src\\__tests__\\setup\\jest.setup.ts"],"sourcesContent":["/**\r\n * Jest Test Setup Configuration\r\n * \r\n * This setup file runs after the test framework is installed in the environment\r\n * but before each test file is executed.\r\n */\r\n\r\n// Import only basic Jest extended matchers\r\n// TODO: Re-enable React Native testing library when version mismatch is resolved\r\n// import { configure } from '@testing-library/react-native';\r\n// import 'jest-extended'; // Additional matchers\r\n\r\n// Configure testing library for React Native\r\n// configure({\r\n//   // Automatically cleanup after each test\r\n//   asyncUtilTimeout: 10000,\r\n//   // Add custom queries if needed\r\n// });\r\n\r\n// Global test utilities\r\ndeclare global {\r\n  namespace jest {\r\n    interface Matchers<R> {\r\n      toBeWithinRange(floor: number, ceiling: number): R;\r\n    }\r\n  }\r\n}\r\n\r\n// Custom Jest matchers\r\nexpect.extend({\r\n  toBeWithinRange(received: number, floor: number, ceiling: number) {\r\n    const pass = received >= floor && received <= ceiling;\r\n    if (pass) {\r\n      return {\r\n        message: () =>\r\n          `expected ${received} not to be within range ${floor} - ${ceiling}`,\r\n        pass: true,\r\n      };\r\n    } else {\r\n      return {\r\n        message: () =>\r\n          `expected ${received} to be within range ${floor} - ${ceiling}`,\r\n        pass: false,\r\n      };\r\n    }\r\n  },\r\n});\r\n\r\n// Global test timeout\r\njest.setTimeout(60000);\r\n\r\n// Mock console methods that are noisy during tests\r\nconst originalConsoleError = console.error;\r\nconst originalConsoleWarn = console.warn;\r\n\r\nbeforeAll(() => {\r\n  // Suppress specific React Native warnings that are expected during tests\r\n  console.error = (...args: any[]) => {\r\n    if (\r\n      typeof args[0] === 'string' &&\r\n      (args[0].includes('Warning: ReactDOM.render is no longer supported') ||\r\n       args[0].includes('Warning: componentWillMount has been renamed'))\r\n    ) {\r\n      return;\r\n    }\r\n    originalConsoleError.call(console, ...args);\r\n  };\r\n\r\n  console.warn = (...args: any[]) => {\r\n    if (\r\n      typeof args[0] === 'string' &&\r\n      (args[0].includes('Warning: componentWillReceiveProps has been renamed') ||\r\n       args[0].includes('source.uri should not be an empty string'))\r\n    ) {\r\n      return;\r\n    }\r\n    originalConsoleWarn.call(console, ...args);\r\n  };\r\n});\r\n\r\nafterAll(() => {\r\n  // Restore original console methods\r\n  console.error = originalConsoleError;\r\n  console.warn = originalConsoleWarn;\r\n});\r\n\r\n// Global test state cleanup\r\nafterEach(() => {\r\n  // Clear all mocks after each test\r\n  jest.clearAllMocks();\r\n  \r\n  // Clear any timers\r\n  jest.clearAllTimers();\r\n  \r\n  // Reset any global state if needed\r\n  process.env.NODE_ENV = 'test';\r\n});\r\n\r\n// Performance monitoring for slow tests\r\nconst slowTestThreshold = 5000; // 5 seconds\r\nlet testStartTime: number;\r\n\r\nbeforeEach(() => {\r\n  testStartTime = Date.now();\r\n});\r\n\r\nafterEach(() => {\r\n  const testDuration = Date.now() - testStartTime;\r\n  if (testDuration > slowTestThreshold) {\r\n    console.warn(\r\n      `⚠️  Slow test detected: ${expect.getState().currentTestName} took ${testDuration}ms`\r\n    );\r\n  }\r\n});\r\n\r\n// Memory leak detection\r\nlet initialMemoryUsage: NodeJS.MemoryUsage;\r\n\r\nbeforeEach(() => {\r\n  initialMemoryUsage = process.memoryUsage();\r\n});\r\n\r\nafterEach(() => {\r\n  const finalMemoryUsage = process.memoryUsage();\r\n  const memoryGrowth = finalMemoryUsage.heapUsed - initialMemoryUsage.heapUsed;\r\n  \r\n  // Warn if memory usage grew significantly (>10MB)\r\n  if (memoryGrowth > 10 * 1024 * 1024) {\r\n    console.warn(\r\n      `⚠️  Potential memory leak detected in ${expect.getState().currentTestName}: ` +\r\n      `${Math.round(memoryGrowth / 1024 / 1024)}MB growth`\r\n    );\r\n  }\r\n});\r\n\r\n// Test flakiness detection\r\nconst testResults = new Map<string, number[]>();\r\n\r\nafterEach(() => {\r\n  const testName = expect.getState().currentTestName || 'unknown';\r\n  const testDuration = Date.now() - testStartTime;\r\n  \r\n  if (!testResults.has(testName)) {\r\n    testResults.set(testName, []);\r\n  }\r\n  \r\n  testResults.get(testName)!.push(testDuration);\r\n  \r\n  // Check for flaky tests (high variance in execution time)\r\n  const times = testResults.get(testName)!;\r\n  if (times.length >= 5) {\r\n    const avg = times.reduce((a, b) => a + b, 0) / times.length;\r\n    const variance = times.reduce((acc, time) => acc + Math.pow(time - avg, 2), 0) / times.length;\r\n    const stdDev = Math.sqrt(variance);\r\n    const coefficientOfVariation = stdDev / avg;\r\n    \r\n    // If coefficient of variation > 50%, test might be flaky\r\n    if (coefficientOfVariation > 0.5) {\r\n      console.warn(\r\n        `⚠️  Potentially flaky test detected: ${testName} ` +\r\n        `(CV: ${Math.round(coefficientOfVariation * 100)}%)`\r\n      );\r\n    }\r\n  }\r\n});"],"version":3}