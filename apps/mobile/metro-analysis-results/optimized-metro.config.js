const { getDefaultConfig } = require('expo/metro-config');
const path = require('path');

// Optimized Metro configuration generated by EchoTrail Metro Analyzer
// Generated: 2025-09-19T10:46:19.264Z

const projectRoot = __dirname;
const workspaceRoot = path.resolve(projectRoot, '../..');

const config = getDefaultConfig(projectRoot);

// Enhanced resolver configuration
config.resolver = {
  ...config.resolver,
  nodeModulesPaths: [
    path.resolve(projectRoot, 'node_modules'),
    path.resolve(workspaceRoot, 'node_modules'),
  ].filter(Boolean),
  platforms: ['ios', 'android', 'native', 'web'],
  mainFields: ['react-native', 'browser', 'module', 'main'],
  conditionNames: ['react-native', 'browser', 'require', 'import'],
  assetExts: [...(config.resolver?.assetExts || []), 'webp', 'avif', 'webm'],
  sourceExts: [...(config.resolver?.sourceExts || []), 'mjs', 'cjs', 'tsx', 'ts', 'jsx', 'js', 'json'],
  unstable_enablePackageExports: true,
};

// Enhanced transformer configuration
config.transformer = {
  ...config.transformer,
  minifierConfig: {
    keep_fargs: false,
    mangle: { keep_fnames: false },
    output: { ascii_only: true, quote_style: 3, wrap_iife: true },
    sourceMap: { includeSources: false },
    compress: {
      drop_console: process.env.NODE_ENV === 'production',
      drop_debugger: true,
      pure_getters: true,
      unused: true,
      dead_code: true,
      inline: 3,
      collapse_vars: true,
      evaluate: true,
      join_vars: true,
      loops: true,
      side_effects: false,
    },
  },
  unstable_allowRequireContext: true,
  experimentalImportSupport: true,
  unstable_disableES6Transforms: false,
  unstable_transformProfile: process.env.NODE_ENV === 'production' ? 'hermes-stable' : 'default',
};

// Enhanced serializer configuration
config.serializer = {
  ...config.serializer,
  createModuleIdFactory: () => (path) => {
    const hash = require('crypto').createHash('md5').update(path).digest('hex');
    return hash.substring(0, 8);
  },
  processModuleFilter: (module) => {
    if (process.env.NODE_ENV === 'production') {
      const excludePatterns = [
        /\/__tests__\//,
        /\.test\./,
        /\.spec\./,
        /\/node_modules\/@?react-devtools/,
        /\/node_modules\/@?flipper/,
      ];
      return !excludePatterns.some(pattern => pattern.test(module.path));
    }
    return true;
  },
};

// Enhanced caching
config.cacheStores = [
  {
    name: 'hermes-transform-cache',
    get: () => Promise.resolve(null),
    set: () => Promise.resolve(),
  },
];

// Watch folders
config.watchFolders = [workspaceRoot];

module.exports = config;
